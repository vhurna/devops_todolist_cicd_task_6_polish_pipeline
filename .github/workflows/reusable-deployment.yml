name: deploy-to-kind

run-name: Deploy to ${{ inputs.environment }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      artifact:
        description: 'Select artifact from matrix'
        required: true
        type: choice
        options: [ubuntu-3.8, ubuntu-3.9, windows-3.8, windows-3.9]
      helm-values-path:
        description: 'Path to Helm values'
        type: string
        default: './todoapp/values.yaml'
      helm-release-name:
        description: 'Helm release name'
        type: string
        default: 'todoapp'

jobs:
  deploy-kind:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: deploy-${{ inputs.environment }}-${{ github.ref_name }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download python artifact
        uses: actions/download-artifact@v4
        with:
          name: python-artifacts-${{ inputs.artifact }}
          path: ./src

      - name: Download Helm package
        uses: actions/download-artifact@v4
        with:
          name: helm-artifacts
          path: .

      - name: Install Kind CLI
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/

      - name: Create Kind cluster
        run: kind create cluster --config cluster.yml

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Helm install (dry-run)
        run: |
          helm install ${{ inputs.helm-release-name }} ./todoapp-*.tgz \
            -f ${{ inputs.helm-values-path }} \
            --dry-run

      - name: Helm upgrade/install (atomic)
        run: |
          helm upgrade --install ${{ inputs.helm-release-name }} ./todoapp-*.tgz \
            -f ${{ inputs.helm-values-path }} \
            --atomic --wait --timeout 300s
